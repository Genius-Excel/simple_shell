#include "shell.h"

/**
 * call_and_execute - this function executes the command passed in from
 * the command line.
 * @args: command line arguments to be received and executed.
 * Return: returns 0 on success, -1 on failure.
 */
int call_and_execute(char *args[]);

int call_and_execute(char *args[])
{
    pid_t pid_fork_val;
    int wt_status_sig;

    pid_fork_val = fork();

    if (pid_fork_val == -1) /* Potential error in creating a child*/
    {
        perror("Fork Error");
        return -1; /* Return -1 on failure*/
    }

    if (pid_fork_val == 0) /* This indicates the child process*/
    {
        /* Condition checks if user entered full path*/
        if (strchr(args[0], '/') != NULL)
        {
            /* Validate the command received before executing*/
            if (execve(args[0], args, environ) == -1)
            {
                perror("Error from execve");
                return -1; /* Return -1 on failure*/
            }
        }
        else
        {
            char *path = cstm_getenv("PATH");
            char *token = cstm_strtok(path, ":");

            while (token != NULL)
            {
                char executable_file[MAX_INPUT_SIZE];
                strcpy(executable_file, token);
                strcat(executable_file, "/");
                strcat(executable_file, args[0]);

                if (access(executable_file, X_OK) != -1)
                {
                    execve(executable_file, args, environ);
                }

                token = cstm_strtok(NULL, ":");
            }
            perror("No compatible search");
            return -1; /* Return -1 on failure*/
        }
    }
    else
    {
         do
        {
            /* Wait for the child process to complete and get its exit status*/
            if (waitpid(pid_fork_val, &wt_status, 0) == -1)
            {
                perror("Waitpid Error");
                exit(EXIT_FAILURE);
            }

            /* Check if the child process exited normally*/
            if (WIFEXITED(wt_status))
            {
                /* Exit with the same status as the child process*/
                exit(WEXITSTATUS(wt_status));
            }
            /* Check if the child process was terminated by a signal*/
            else if (WIFSIGNALED(wt_status))
            {
                /* Exit with the same signal as the child process*/
                raise(WTERMSIG(wt_status));
            }
        } while (!WIFEXITED(wt_status) && !WIFSIGNALED(wt_status));
    }

    return 0; /* Return 0 on success*/
}

